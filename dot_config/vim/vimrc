set encoding=utf-8
scriptencoding utf-8
set fileencoding=utf-8 " 保存時の文字コード
set fileencodings=ucs-boms,utf-8,euc-jp,cp932 " 読み込み時の文字コードの自動判別. 左側が優先される
set fileformats=unix,dos,mac " 改行コードの自動判別. 左側が優先される
set ambiwidth=double " □や○文字が崩れる問題を解決
set statusline=%F
set history=200
set nobackup
set noswapfile
set autoread
set hidden
set showcmd
set cursorline
" 行末の1文字先までカーソルを移動できるようにする
set virtualedit=onemore
set smartindent
set showmatch
source $VIMRUNTIME/macros/matchit.vim
set wildmenu
set wildmode=list:longest
set wildmode=full
set wrap
set list
set listchars=tab:»-,trail:-,extends:»,precedes:«,nbsp:%
set belloff=all
set hlsearch
set tabstop=2
set shiftwidth=2
set expandtab
set incsearch
set signcolumn=yes
set backspace=indent,eol,start
set viminfo+=n~/.config/vim/viminfo
set re=0
set nospell

noremap <C-]> <esc>
noremap! <C-]> <esc>

syntax enable

" 折り返し時に表示行単位での移動できるようにする
nnoremap j gj
nnoremap k gk

filetype plugin indent on
runtime macros/matchint.vim

" 検索時のハイライトを消す
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

if has('vim_starting')
    " 挿入モード時に非点滅の縦棒タイプのカーソル
    let &t_SI .= "\e[6 q"
    " ノーマルモード時に非点滅のブロックタイプのカーソル
    let &t_EI .= "\e[2 q"
endif

" 全角スペースを可視化
augroup highlightIdegraphicSpace
  autocmd!
  autocmd Colorscheme * highlight IdeographicSpace term=underline ctermbg=DarkGreen guibg=DarkGreen
  autocmd VimEnter,WinEnter * match IdeographicSpace /　/
augroup END

augroup disableGitHubCopilot
    autocmd!
    autocmd BufRead,BufNewFile $HOME/workspace/ayuzaka/atcoder-go/* execute ":Copilot disable"
    autocmd BufRead,BufNewFile $HOME/Downloads/diary/* execute ":Copilot disable"
augroup END

autocmd InsertLeave * set nopaste

autocmd BufNewFile,BufRead .env* set filetype=dotenv
autocmd BufNewFile,BufRead *.wat set filetype=wast

" https://zenn.dev/vim_jp/articles/2023-06-30-vim-substitute-tips
cnoreabbrev <expr> s getcmdtype() .. getcmdline() ==# ':s' ? [getchar(), ''][1] .. "%s///g<Left><Left>" : 's'

"""""""""""""""""""""
" Plugin
"""""""""""""""""""""

call plug#begin('~/.vim/plugged')

Plug 'arcticicestudio/nord-vim'
Plug 'cocopon/iceberg.vim'
Plug 'morhetz/gruvbox'

Plug 'vim-denops/denops.vim'

Plug 'Shougo/ddc.vim'
Plug 'Shougo/ddc-ui-native'
Plug 'Shougo/ddc-matcher_head'
Plug 'Shougo/ddc-sorter_rank'

Plug 'Shougo/ddu.vim'
Plug 'Shougo/ddu-ui-ff'
Plug 'Shougo/ddu-source-file_rec'
Plug 'matsui54/ddu-source-file_external'
Plug 'uga-rosa/ddu-source-lsp'
Plug 'shun/ddu-source-rg'
Plug 'Shougo/ddu-source-file'
Plug 'Shougo/ddu-kind-file'
Plug 'Shougo/ddu-filter-matcher_substring'
Plug 'matsui54/ddu-source-help'
Plug 'kuuote/ddu-source-git_status'
Plug 'Shougo/ddu-ui-filer'
Plug 'Shougo/ddu-column-filename'

Plug 'vim-skk/skkeleton'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'

Plug 'easymotion/vim-easymotion'

Plug 'maxmellon/vim-jsx-pretty'
Plug 'leafgarland/typescript-vim'

Plug 'evanleck/vim-svelte', {'branch': 'main'}

Plug 'fatih/vim-go'
Plug 'rust-lang/rust.vim'

Plug 'editorconfig/editorconfig-vim'
Plug 'cohama/lexima.vim'

Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

Plug 'godlygeek/tabular'
Plug 'preservim/vim-markdown'
Plug 'imsnif/kdl.vim'

Plug 'github/copilot.vim'
Plug 'yuki-yano/ai-review.vim'

call plug#end()

set background=dark
colorscheme gruvbox

" custom command
:source ~/.config/vim/command.vim

" 各種設定の読み込み
let s:plugs = get(s:, 'plugs', get(g:, 'plugs', {}))
function! FindPlugin(name) abort
  return has_key(s:plugs, a:name) ? isdirectory(s:plugs[a:name].dir) : 0
endfunction
command! -nargs=1 UsePlugin if !FindPlugin(<args>) | finish | endif

runtime! vim_config/*.vim
